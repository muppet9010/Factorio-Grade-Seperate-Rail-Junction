PORTAL USAGE TRAIN DETECTOR ENTITY FUNCTIONALITY POTENTIAL CHANGE
----------------
Once the entry train detector is triggered do we want to commit the train to entering the tunnel?
DO COMMIT:
    - If we did we could create the dummy train at this point, rather than at traversing time.
    - Set the approaching train to manual and force its speed. Also stop player from affecting its schedule in any way.
    - Would replace TrainManager.TrainOnPortalTrackOngoing() with calling TrainManager.TrainApproachingOngoing() and letting that manage it.
    - This probably won't have any UPS impact overall, but should make the logic simplier for edge cases.
    - Ignore manual driving for now, just worry about scheduled trains and if their path/station changes during approach.
    - Would resolve the current issue where the train's speed slows as it approaches the signal as although we reset it every tick (TrainManager.TrainApproachingOngoing()) the game applies some breaking as a % of distance remaining, this didn't use to happen as entering trains were on manaul forced speed in the old mod.
DON'T COMMIT:
    - Would still need to resolve the current issue where the train's speed slows as it approaches the signal as although we reset it every tick (TrainManager.TrainApproachingOngoing()) the game applies some breaking as a % of distance remaining, this didn't use to happen as entering trains were on manual forced speed in the old mod.


TODO next
----------------
    - Work out train travel time as per Vision. Note aim of low UPS rather than perfection. Document decision, known negatives and reasoning.
    - Update remaining old Tests.
    - For 1 tick the entrance entry signal goes to green as theres no entering train there and the circuit controlled source signal from the leaving exit signal takes a tick to update. I think we need to put in an entity in the entrance portal earlier to prevent this, or leave the entering train's lead locomotive (one that kills the detector) in place for a tick with 0 speed on manual (change force, invunerable, can't be deconned, etc). It shows on the PathfinderWeightings test. This was an issue before as well, the timing just never triggered in the test. If we decide to commit the train to using the tunnel once it triggers the entry train detector then we can clone the train 1 tick before we destroy the old train, thus resolving this in passing.
    - An extension to the 1 tick delay issue on trains transitioning. The same applies to entering trains, if 2 trains both try to drive/path through the tunnel at the same tick I think they will both be allowed to start their journeys. The second will be rejected at the entrance entry signal, but will then be blocking the line. Only applies to bi-directional tunnel usage and needs special tests with facing off locos right on the end of the tunnel with slow acceleration. Needs a dedicated test to confirm behavour.


TODO later
----------------
	- Make wagons invunerable until they start to move when travelling underground. Also make the train carriages indestructable to keep things simple.
    - Clickable on portal area's will raise a dialogue showing max supported train length for this and the other end (if exists). This area will have some above ground visual blocking graphics so train within it isn't visible. Both should be created when the portal is complete and not require a tunnel. Add an option to have the tunnel train mined to a chest in the tunnel itself should some weird issue arise where the trian can't be gotten out. This is like a manual last resort.
    - Make sure a player can't get in a traversing train carriage and if they can detect and handle it somehow if easy. Or log it if its not going to be nicely handled.
    - If a train is changed and losses its train ID the mod will fail as we don't track train ID's any more. We just need to handle this rare case in start of stateful functions some way so it can be recovered/tidied-up in a sane method.
	- A transitioning train can be marked for decon, it needs to prevent this in addition to being invunerable, not player selectable, notable to have its orders accessed/changed.
    - At present all rail in the portals is shown as standard on map. Is this really desired as it used to not be like this.
    - With the aggressive placement of portal track entry detection entity if a train is stopped on entry (coasting, too long, etc) it is on portal rails. The loco will be destroyed on mining, but not trigger the signals or the portal in use check. Consider how to handle or acceept (and document).
    - Make a proper test for rebuilding all tunnel portal and underground part combinations so it can be tested properly.
    - The Portal and Underground function OnBuiltEntityGhost() could be merged in a central location to reduce double function calling when the behavor is the same for each, just merge the entity names being checked. Also can move Tunnel.OnPlayerRotatedEntity() there.
    - The portal part connected checking in Portal.UpdatePortalsForNewPortalPart() doesn't stop odd part ordering that arises from 2 incompatible portals being joined, like:  S S E S S BUILD_S_HERE E S. It just declares a portal complete when 2 Ends are within it, regardless of where straights may be, so youd could also build this in order and it would include all within the complete portal: S E S E
    - The current player container concept needs updating to calculate the player containers current position in the tunnel. As part of this move the player riding tests to their own test(s) and remove them from other tests. Cover:
        - Tunnel journey in all orientations at high speed with 2 other trains at the same time, put player in middle train.
        - Tunnel destroyed while player underground.
        - The tests should check the player position every tick and make sure not moved far. Look to detect unexpected jumping between trains or for above and below mis-alignments. Get position before entering tunnel and exited, as should be smooth journey.
        - Do player riding in train with body and editor mode for all tests to make sure character is/isn't present is tested.
    - Transitioning trains will activate abilities as the train part is in manual mode and stopped. This includes artillery wagons automatically opening fire and player roboports sending out construction robots.
        - Can't use active state on rolling stock.
        - Can try setting the transitioning train's artillery wagon's relative_turret_orientation to 0 every tick unless the leavingTrain is in manual_control or has stopped at a station. This doesn't help with player roboports however.
        - Look at setting the transitioning train's speed every tick to alternate between +/- 0.00000001 (rather than 0). Will mean the enteringTrain is never "stopped" and so nothing should ever activate.
        - The idea of using the transitioning train rathr than a dummy train and adding a non movable carriage may resolve this.


Future Plans
----------------
    - Filtering of events by entity type and name should be done centrally. As at present we have 5 functions all reacting to entity built events and getting fields indivudually for just 1 in 5 functions to look deeper at the event. This should form part of my library function. Will save on checking if things are valid and should return the type/name attribute as cached to each calling function. on_built_entity
    - Utils class - break out in to seperate files.
    - Utils class - make use of ProtoTypeAttributes library to cache prototype data automatically. Present in the new train functions.
    - Tunnel usage events being raised uses some UPS per tunnel carriage activity (N)? So look to only raise if a mod has requested the eventId, as without it nothing can be listening to the events anyway.
    - Remove invisible tunnel segment signals from segments not with a crossing on them as no need for them and adds track lag. As signals at Blocker End of portal and the one in the crossing segment will always end up with 1 between 2 crossing segments next to each other.
	- Allow corners and diagonals with the tunnel pieces as its just an abstract length to have traversal time calculated for now. Player Container position will need expanding to handle corners in tunnel. Also would open the door to portals not being aligned, i.e. a U shape. Identify UPS impact when having to place cloned carraiges and flipping them.
    - Allow corners and diagonals with the portal pieces. Will make train placement harder, but the portal entities are being designed with this potential functionality in mind.
	- Manually driven trains trying to enter a portal area will either be stopped dead if tunnel in use or can be manually driven through using same logic as was being worked on for full mod version. If problematic just make it go on auto once committed and then at the far end return it to the players control from 0 speed. Currently they are blocked from entering always. Would need to handle trains arriving on top of one another and destroying one another when placed. If this is done then some of the preliminary checks at entrance detection could be removed? When manually driving a train through a tunnel show a render of carriages underground. Have them appear semi transparent or tinted so obviously not real.
    - Support 2 tunnels crossing - details vary - UPDATED NOTES IN DEDICATED BRANCH FOR THIS
    - Mod Compatibility:
        - Look at TSM compatibility.
        - Look at LTN compatibility.
        - Mods that add custom powered locomotives. The current acceleration logic is from the wiki, but managedTrain.locomotiveAccelerationPower doesn't account for max_power of loco. Test later and should be simple enough to fix by comparing to default loco max_power value. I believe the current hardcoded value of "10" is for the default loco attribute.
    - Diagonal tunnel crossings. Would have to be a 8 long tunnel section to get the track to clear the 6 wide tunnel. If the collision box of the crossing was made 0.5~ in from each edge then rails diagonal rails should be placable up to the edge of it. The width doesn't prevent close and spaced double diagonal tracks from being built over a tunnel. Technically some existing entities on the edge would overlap with the mod placed rails, however this is unavoidable to let the player build diagonal rails up to the crossing.
    - When a tunnel is destroyed (by force):
        - Any riding players should have their bodies dumped at the tunnel entrance position (it may be gone), as in vanilla Factorio you can't loose a body. At present the body ends up on the surface where the player's PlayerContainer was.
        - Detect any destroyed chest's spill on ground type mods and honour their settings for dropping train contents on ground at tunnel portals.
    - Look at if tiles (concrete) can be placed over tunnel segments or something done to allow them to be paved over (even if just a visual). Maybe have tunnel segments have below tile graphics and I place tunnel tiles down, keeping a record of the old tile. This lets people concrete over and remove concrete. If the tunnel segment is removed I return the stored origional tile name back.
    - When the train can't leave the tunnel at speed see how far away the stopping point is and delay for that distance then try to release again. In general this will give a realistic outcome at near 0 more UPS usage. This isn't current vision though.


Concept Changes
----------------
    - Dummy train changes - MUST BE DONE IN OWN BRANCH TO ENABLE ROLLBACK:
        - Don't create and manage a dummy train, but add a carriage to the cloned train that has max speed of 0 (or max friction force and weight). This should mean the real train can replace the dummy train. This would mean that the leaving train uses fuel for the duration of the tunnel trip and so has to have this monitored and refilled to get it out of the tunnel, or have an option when a player opens the tunnel GUI that if a train is in it and run out of fuel, an inventory slot is available and anything put in it will be put in the loco's of the currently using train. This fuel issue is very much an edge case.
        - Would it be viable to keep the dummy train permanently and just change its force, plus top up fuel. Rather than create it each time. Need to ensure it never can move. Would take the role of the blocking train as well.
	- Review possibility to reduce setting the incoming trains speed to once every x ticks, rather than every tick. Won't be perfect, but should keep roughly the right speed ? Would be some sort of UPS saving if needed.
    - Building standard rotated entities on "tunnel being completed" may be lower UPS if done via blueprint or by cloning examples on a reference surface, than currently using entity_create - test and see.
    - Can we do TrainManager.TrainOnPortalTrackOngoing() say once per second rather than every tick. May need a change to a more expensive API check of the train rather than the signal. But this function is now a big UPS user.


Ideas
----------------
    - Review what to allow to be built on top of the tunnel segments, either just belts & power poles or anything non trains. At present is nothing, but can be driven over.
    - Tunnel sections shouldn't collide with cliffs, but rail crossing sections should. Also check if cliff reshaping from adjacent cliff removal would destroy tunnels going under them or cause the cliffs to vanish as they can't reshape.
    - Look at if tunnel segments (not rail crossing ones) can be built under water. Should be same placement entity, just a differnet graphics entity on top to show the tunnel on the lake bed. If possible have to work out transition point.
    - Request for big power poles to be able to be placed on tunnel entrances to keep tunnels like rail block blurprints (MOJO style). Maybe including big power poles at both ends of the tunnel portal and in the middle with red & green wires between them? Would need to expose wire connection points though. Or have power and red/green wires transmitted through tunnels with just a connection on the entrance of each portal?






Functionality not currently supported (FROM OLD MOD VERSION - BUT STILL GENERALLY RELEVENT)
-------------------------------------
    - Interlinked abnormal tunnel usage cases:
        - Things that end up in the exit portals placement areas.
            - When a leaving carriage tries to be placed, if it fails check what blocked it.
            - If its part of the leavingTrain then error
            - Otherwise kill the blocker and place a devider entity to stop any existing carriages connecting to the newly placed carriage, then place the carriage again.
            - This is to cater for when things end up on the exit portal unexpected.
            - Once the leaving carriage is placed the speed control should let the tunnel just continue normally.
        - Handle player driven trains approaching the tunnel.
            - Can change the player container to be a car and put a dummy character in the passenger seat (so no one else can get in). means the players train control will be natural.
            - have the train being manually driven for the full tunnel usage.
            - Can read the players input from the train part/vehicle they happen to be in.
            - Apply the acceleration to the underground train and let it naturally push its speed to both the entering and leaving train parts.
            - Apply the players direction input to the leaving train part if they're not in it.
            - Have it go through on auto for now from when it commits to when it starts leaving.
            - Will need to add tests for manually driven trains beign changed to automatic at various points in their tunnel usage.
        - Handle 2 trains both trying to use the tunnel and its portals at once.
            - This first and second trains may each be coasting train, player driven or scheduled trains (not both scheduled).
            - This should be reduced by coasting trains and carriage add/remove logic.
            - Need to check/handle if it prevents the placing of blocking or dummy locos or ends up on the tunnel placement area.
            - Look at if we can easily detect when the train has fully moved on to the portal track and we can put the usage detection entity back down behind it before it has fully entered. Just lowers the chance of a train "sneaking" on to the portal tracks behind it. Will have to get distance from back carriage to transition signal until the train starts entering and then we can use its length to tell when its fully across the threshold. If its a short train and it pulls on to the portal and stops, we can't easily tell where the end carriage away from the Transition signal is without measuring distance ?



Train acceleration:
    local cruisingSpeed = max(0, abs(train.speed) - train_friction_force ÷ train_weight)
    local accelerationRawSpeed = cruisingSpeed + (10 × number_of_locomotives_in_moving_direction × fuel_acceleration_bonus ÷ train_weight)
    local accelerationWindSpeed = accelerationRawSpeed × (1 - air_resistance_of_front_rolling_stock ÷ (train_weight ÷ 1000))
    local newSpeed = math.min(accelerationWindSpeed, max_forward/backward_speed)

Train Breaking Distance:
-- TrainBreakignForce = trains total breaking force * force's train_braking_force_bonus
  local absSpeed = math.abs(train.speed)
  local ticksToStop = absSpeed / ((trainBrakingForce + trainFrictionForce) / trainWeight)
  local breakingDistance = math.max(ticksToStop / 2.0, 1.1) * absSpeed